{"ast":null,"code":"'use strict';\n\nvar COMMA = 0x2c;\nvar BRACKET_START = 0x5b;\nvar BRACKET_END = 0x5d;\nvar NEWLINE = 0xa;\nmodule.exports = parse;\n\nfunction parse(read) {\n  var done = false;\n  var queue = [];\n  var pos = 0;\n  var ni = 0;\n  var head = '';\n  var tail = '';\n  var line = '';\n  var cc = 0;\n  var ll = 0;\n  return function again(abort, cb) {\n    if (abort) return read(abort, cb);\n    if (queue.length > 0) return cb(null, queue.shift());\n    if (done) return cb(true);\n    return read(null, function (end, data) {\n      if (end !== null) {\n        if (end !== true) return cb(end); // error\n\n        if (head === '') return cb(true);\n        done = true;\n        data = '\\n';\n      }\n\n      pos = 0;\n      if (typeof data !== 'string') data = data.toString();\n\n      while ((ni = data.indexOf('\\n', pos)) !== -1) {\n        tail = data.slice(pos, data.charCodeAt(ni - 1) === COMMA ? ni - 1 : ni);\n        line = (pos === 0 ? ni === 0 && head.charCodeAt(head.length - 1) === COMMA ? head.slice(0, -1) : head : '') + tail;\n        pos = ni + 1;\n        ll = line.length;\n        if (ll === 0) continue;\n\n        if (ll === 1) {\n          cc = line.charCodeAt(0);\n          if (cc === BRACKET_START || cc === BRACKET_END || cc === NEWLINE) continue;\n        }\n\n        queue.push(JSON.parse(line));\n      }\n\n      head = (pos === 0 ? head : '') + data.slice(pos);\n      return again(null, cb);\n    });\n  };\n}","map":{"version":3,"sources":["C:/Users/dekle/Documents/TechAssignments/CreditCardValidate/creditcardvalidate/node_modules/pull-json-parse/index.js"],"names":["COMMA","BRACKET_START","BRACKET_END","NEWLINE","module","exports","parse","read","done","queue","pos","ni","head","tail","line","cc","ll","again","abort","cb","length","shift","end","data","toString","indexOf","slice","charCodeAt","push","JSON"],"mappings":"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","sourcesContent":["'use strict';\n\nvar COMMA = 0x2c;\nvar BRACKET_START = 0x5b;\nvar BRACKET_END = 0x5d;\nvar NEWLINE = 0xa;\n\nmodule.exports = parse;\n\nfunction parse( read ){\n\tvar done = false;\n\tvar queue = [];\n\tvar pos = 0;\n\tvar ni = 0;\n\tvar head = '';\n\tvar tail = '';\n\tvar line = '';\n\tvar cc = 0;\n\tvar ll = 0;\n\n\treturn function again( abort, cb ){\n\t\tif (abort)\n\t\t\treturn read(abort, cb);\n\n\t\tif (queue.length > 0)\n\t\t\treturn cb(null, queue.shift());\n\n\t\tif (done)\n\t\t\treturn cb(true);\n\n\t\treturn read(null, function( end, data ){\n\t\t\tif (end !== null) {\n\t\t\t\tif (end !== true)\n\t\t\t\t\treturn cb(end);\t// error\n\n\t\t\t\tif (head === '')\n\t\t\t\t\treturn cb(true);\n\n\t\t\t\tdone = true;\n\t\t\t\tdata = '\\n';\n\t\t\t}\n\n\t\t\tpos = 0;\n\n\t\t\tif (typeof data !== 'string')\n\t\t\t\tdata = data.toString();\n\n\t\t\twhile ((ni = data.indexOf('\\n', pos)) !== -1) {\n\t\t\t\ttail = data.slice(pos, data.charCodeAt(ni - 1) === COMMA\n\t\t\t\t\t? ni - 1\n\t\t\t\t\t: ni);\n\n\t\t\t\tline = (pos === 0\n\t\t\t\t\t? (ni === 0 && head.charCodeAt(head.length - 1) === COMMA\n\t\t\t\t\t\t? head.slice(0, -1)\n\t\t\t\t\t\t: head)\n\t\t\t\t\t: '')+tail;\n\n\t\t\t\tpos = ni + 1;\n\n\t\t\t\tll = line.length;\n\n\t\t\t\tif (ll === 0)\n\t\t\t\t\tcontinue;\n\n\t\t\t\tif (ll === 1) {\n\t\t\t\t\tcc = line.charCodeAt(0);\n\n\t\t\t\t\tif (cc === BRACKET_START\n\t\t\t\t\t\t|| cc === BRACKET_END\n\t\t\t\t\t\t|| cc === NEWLINE)\n\t\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tqueue.push(JSON.parse(line));\n\t\t\t}\n\n\t\t\thead = (pos === 0 ? head : '')+data.slice(pos);\n\n\t\t\treturn again(null, cb);\n\t\t});\n\t}\n}\n"]},"metadata":{},"sourceType":"script"}