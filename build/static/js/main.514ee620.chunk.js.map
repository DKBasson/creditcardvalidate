{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","sessioncreditCards","useState","errorMessageCardNumber","setErrorMessage","errorMessageCountry","setCountryErrorMessage","countrydisabled","setCountryDisabled","buttondisabled","setButtonDisabled","runValidateCountry","value","req","XMLHttpRequest","onload","text","responseText","console","log","blacklistedCountriesArray","split","i","length","trim","toUpperCase","indexOf","open","send","ValidateCountry","style","display","justifyContent","alignItems","type","placeholder","onChange","e","target","validator","isCreditCard","id","disabled","onClick","creditCardNumber","document","getElementById","textarea","preventDefault","push","join","alert","rows","cols","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"6MAoGeA,EAhGH,WA6BV,IAAMC,EAAqB,GAC3B,EAAkDC,mBAAS,IAA3D,mBAAOC,EAAP,KAA+BC,EAA/B,KACA,EAAsDF,mBAAS,IAA/D,mBAAOG,EAAP,KAA4BC,EAA5B,KACA,EAA+CJ,oBAAS,GAAxD,mBAAOK,EAAP,KAAyBC,EAAzB,KACA,EAA6CN,oBAAS,GAAtD,mBAAOO,EAAP,KAAwBC,EAAxB,KAcMC,EAAqB,SAACC,IA3C5B,SAAyBA,GACvB,IAAMC,EAAM,IAAIC,eAChBD,EAAIE,OAAS,WACT,IAAMC,EAAOH,EAAII,aACjBC,QAAQC,IAAIH,GAEZ,IADA,IAAII,EAA4BJ,EAAKK,MAAM,MAClCC,EAAI,EAAGA,EAAIF,EAA0BG,OAAQD,IACpDF,EAA0BE,GAAKF,EAA0BE,GAAGE,OAAOC,cAErEP,QAAQC,IAAIC,IAC2D,IAAnEA,EAA0BM,QAAQd,EAAMY,OAAOC,gBAAmC,KAAVb,GAC1EN,EAAuB,UACvBI,GAAkB,KACyD,IAAnEU,EAA0BM,QAAQd,EAAMY,OAAOC,gBACvDnB,EAAuB,gCACvBI,GAAkB,KAElBJ,EAAuB,UACvBI,GAAkB,KAGxBG,EAAIc,KAAK,MAvBK,4BAwBdd,EAAIe,OAsBJC,CAAgBjB,IAqBlB,OACE,qBAAKkB,MAAO,CACVC,QAAS,OACXC,eAAgB,SAChBC,WAAY,UAHZ,SAKE,gCACE,qEAEE,uBAAOC,KAAK,OAAOC,YAAY,2BAA2BC,SAAU,SAACC,GAAD,OA3ChDzB,EA2CyEyB,EAAEC,OAAO1B,WAzCxG2B,IAAUC,aAAa5B,IACzBR,EAAgB,UAChBI,GAAmB,KAGnBJ,EAAgB,UAChBI,GAAmB,KARI,IAACI,GA2C0F6B,GAAG,qBACjH,iCAAOtC,EACL,0BAEF,uBACA,uBAAOuC,SAAUnC,EAAiB4B,YAAY,gBAAgBD,KAAK,OAAOE,SAAU,SAACC,GAAD,OAAM1B,EAAmB0B,EAAEC,OAAO1B,UACtH,iCAAOP,EACL,0BAGJ,wBAAQ6B,KAAK,OAAOQ,SAAUjC,EAAgBgC,GAAG,aAAaE,QAtCpE,SAA0BN,GACxB,IAAMO,EAAmBC,SAASC,eAAe,oBAAoBlC,MACrEM,QAAQC,IAAIlB,GACZ,IAAI8C,EAAWF,SAASC,eAAe,cACvCT,EAAEW,iBAC+B,IAA9B/C,EAAmBsB,SAIwC,IAAzDtB,EAAmByB,QAAQkB,EAAiBpB,SAH/CvB,EAAmBgD,KAAKL,GACxBG,EAASnC,MAAQX,EAAmBiD,KAAK,OAMvCC,MAAM,0BAA4BP,EAAmB,gDAyBrD,8BACA,uBACA,uBACA,0BAAUH,GAAG,aAAaC,UAAU,EAAMU,KAAK,IAAIC,KAAK,aCnFjDC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFpB,SAASC,eAAe,SAM1BQ,K","file":"static/js/main.514ee620.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport validator from 'validator';\n\n\nconst App = () => {\n\n  const fileUrl = 'blacklistedCountries.txt';\n\n  function ValidateCountry(value) {        \n    const req = new XMLHttpRequest();    \n    req.onload = function() {\n        const text = req.responseText; \n        console.log(text) \n        var blacklistedCountriesArray = text.split('\\n');\n        for (var i = 0; i < blacklistedCountriesArray.length; i++) {\n          blacklistedCountriesArray[i] = blacklistedCountriesArray[i].trim().toUpperCase();\n        } \n        console.log(blacklistedCountriesArray) \n        if (blacklistedCountriesArray.indexOf(value.trim().toUpperCase()) === -1 && value !== '') {\n          setCountryErrorMessage('✅');\n          setButtonDisabled(false);\n        } else if(blacklistedCountriesArray.indexOf(value.trim().toUpperCase()) !== -1){\n          setCountryErrorMessage('❌ (Blacklisted Country)');\n          setButtonDisabled(true); \n        }else {\n          setCountryErrorMessage('❌');\n          setButtonDisabled(true);\n        }\n    };    \n    req.open('GET', fileUrl);\n    req.send();\n}\n\n  const sessioncreditCards = [];\n  const [errorMessageCardNumber, setErrorMessage] = useState('');\n  const [errorMessageCountry, setCountryErrorMessage] = useState('');\n  const [countrydisabled , setCountryDisabled] = useState(true);\n  const [buttondisabled , setButtonDisabled] = useState(true);\n\n  const validateCreditCard = (value) => {\n    \n    if (validator.isCreditCard(value)) {\n      setErrorMessage('✅');\n      setCountryDisabled(false);\n      \n    } else {\n      setErrorMessage('❌');\n      setCountryDisabled(true);\n    }\n  }\n\n  const runValidateCountry = (value) => {\n    ValidateCountry(value);\n  }\n  function handleSaveButton(e) {\n    const creditCardNumber = document.getElementById('creditCardNumber').value\n    console.log(sessioncreditCards)\n    var textarea = document.getElementById(\"savedCards\");\n    e.preventDefault();\n    if(sessioncreditCards.length === 0){\n      sessioncreditCards.push(creditCardNumber);\n      textarea.value = sessioncreditCards.join(\"\\n\");\n    }else{\n      if(sessioncreditCards.indexOf(creditCardNumber.trim()) === -1){\n        sessioncreditCards.push(creditCardNumber);\n        textarea.value = sessioncreditCards.join(\"\\n\");\n      } else {\n        alert('The Credit Card number ' + creditCardNumber + ' already exists, please try a different one');\n      }\n    }\n    }\n  \n\n  return (\n    <div style={{\n      display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    }}>\n      <pre>\n        <h2>Validate and Save Credit Card below</h2>\n\n          <input type=\"text\" placeholder=\"Enter Credit Card Number\" onChange={(e)=> validateCreditCard(e.target.value)} id='creditCardNumber'></input>\n          <span>{errorMessageCardNumber}\n            <br />\n          </span>\n          <br />\n          <input disabled={countrydisabled} placeholder=\"Enter Country\" type=\"text\" onChange={(e)=> runValidateCountry(e.target.value)}></input>\n          <span>{errorMessageCountry}\n            <br />\n          </span>\n\n        <button type='save' disabled={buttondisabled} id='saveButton' onClick={handleSaveButton} >Save Information</button>\n        <br />\n        <br />\n        <textarea id=\"savedCards\" disabled={true} rows=\"4\" cols=\"50\"></textarea>\n      </pre>\n    </div>\n  );\n}\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}